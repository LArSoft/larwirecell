#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "LArG4_dune.fcl"
#include "IonAndScint_dune.fcl"
#include "wirecell_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "tools_dune.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist.root" }
  TimeTracker:       {}
  MemoryTracker:         { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
#                        @table::dunefd_simulation_services
  @table::dunefd_1x2x6_simulation_services
}

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dune_fixedpeds
# DetSim services.
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zslegacy
services.AdcCompressService:       @local::cmpblock

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    20000014    # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::microboone_singlep
   largeant:    @local::dunefd_larg4
   IonAndScint: @local::dunefd_ionandscint
   # tpcrawdecoder: @local::dunefd_horizdrift_1x2x6_sim_nfsp # sim + nf + sp
   tpcrawdecoder: @local::tpcrawdecoder_dunefd_horizdrift_1x2x6 # sim only
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, generator, largeant, IonAndScint, tpcrawdecoder ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

physics.producers.generator.PDG: [ 13 ]            # mu-
physics.producers.generator.PosDist: 0             # Flat position dist.
physics.producers.generator.X0: [ 200. ]
physics.producers.generator.Y0: [ 200. ]
physics.producers.generator.Z0: [ 0. ]
physics.producers.generator.T0: [ 500.0 ]
physics.producers.generator.SigmaX: [ 0 ]      # x = (-3.6, 3.6)
physics.producers.generator.SigmaY: [ 0 ]      # y = (-6, 6)
physics.producers.generator.SigmaZ: [ 0 ]      # z = (0, 13.9)
physics.producers.generator.SigmaT: [ 0 ]        # In time
physics.producers.generator.PDist: 0               # Flat momentum dist. 
physics.producers.generator.P0: [ 1. ]
physics.producers.generator.SigmaP: [ 0. ]
physics.producers.generator.AngleDist: 0           # Flat angle dist.
physics.producers.generator.Theta0XZ: [ 0. ]       # y-azimuth
physics.producers.generator.Theta0YZ: [ 90. ]       # y-latitude
physics.producers.generator.SigmaThetaXZ: [ 0. ] 
physics.producers.generator.SigmaThetaYZ: [ 0. ]

physics.producers.tpcrawdecoder.wcls_main.configs: [
  "pgrapher/experiment/dune10kt-1x2x6/wcls-sim-drift-simchannel-deposet.jsonnet"
  # "pgrapher/experiment/dune10kt-1x2x6/wcls-sim-drift-simchannel-deposet-nf-sp.jsonnet"
]

physics.producers.tpcrawdecoder.wcls_main.inputers: ["wclsSimDepoSetSource:"]
physics.producers.tpcrawdecoder.wcls_main.outputers: [
  "wclsDepoSetSimChannelSink:postdrift",
  "wclsFrameSaver:simdigits"
  # "wclsFrameSaver:spsignals"
]

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_dunefd.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}
